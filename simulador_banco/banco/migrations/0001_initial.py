# Generated by Django 4.2.23 on 2025-06-12 23:26

import banco.models
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = []

    operations = [
        migrations.CreateModel(
            name="ClientID",
            fields=[
                (
                    "codigo",
                    models.CharField(max_length=6, primary_key=True, serialize=False),
                ),
                (
                    "client_id",
                    models.CharField(blank=True, max_length=60, null=True, unique=True),
                ),
            ],
            options={
                "db_table": "sim_client_id",
            },
        ),
        migrations.CreateModel(
            name="Creditor",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=70, unique=True)),
            ],
            options={
                "db_table": "sim_creditor",
            },
        ),
        migrations.CreateModel(
            name="CreditorAccount",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "iban",
                    banco.models.EncryptedCharField(
                        help_text="IBAN cifrado",
                        max_length=34,
                        unique=True,
                        validators=[
                            django.core.validators.RegexValidator(
                                message="IBAN inválido",
                                regex="^[A-Z]{2}[0-9A-Z]{13,32}$",
                            )
                        ],
                    ),
                ),
                (
                    "currency",
                    models.CharField(
                        default="EUR",
                        max_length=3,
                        validators=[
                            django.core.validators.RegexValidator(
                                message="Código de moneda ISO 4217, e.g. “EUR”, “USD”",
                                regex="^[A-Z]{3}$",
                            )
                        ],
                    ),
                ),
                (
                    "creditor",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="accounts",
                        to="banco.creditor",
                    ),
                ),
            ],
            options={
                "db_table": "sim_creditor_account",
            },
        ),
        migrations.CreateModel(
            name="CreditorAgent",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("bic", models.CharField(max_length=11, unique=True)),
                (
                    "financial_institution_id",
                    models.CharField(max_length=35, unique=True),
                ),
                ("other_information", models.CharField(blank=True, max_length=70)),
            ],
            options={
                "db_table": "sim_creditor_agent",
            },
        ),
        migrations.CreateModel(
            name="CreditorSimulado",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("nombre", models.CharField(max_length=100)),
            ],
        ),
        migrations.CreateModel(
            name="Debtor",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=70, unique=True)),
                ("customer_id", models.CharField(max_length=35, unique=True)),
            ],
            options={
                "db_table": "sim_debtor",
            },
        ),
        migrations.CreateModel(
            name="DebtorAccount",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "iban",
                    banco.models.EncryptedCharField(
                        help_text="IBAN cifrado",
                        max_length=34,
                        unique=True,
                        validators=[
                            django.core.validators.RegexValidator(
                                message="IBAN inválido",
                                regex="^[A-Z]{2}[0-9A-Z]{13,32}$",
                            )
                        ],
                    ),
                ),
                (
                    "currency",
                    models.CharField(
                        default="EUR",
                        max_length=3,
                        validators=[
                            django.core.validators.RegexValidator(
                                message="Código de moneda ISO 4217, e.g. “EUR”, “USD”",
                                regex="^[A-Z]{3}$",
                            )
                        ],
                    ),
                ),
                (
                    "debtor",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="accounts",
                        to="banco.debtor",
                    ),
                ),
            ],
            options={
                "db_table": "sim_debtor_account",
            },
        ),
        migrations.CreateModel(
            name="DebtorSimulado",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("nombre", models.CharField(max_length=100)),
            ],
        ),
        migrations.CreateModel(
            name="Kid",
            fields=[
                (
                    "codigo",
                    models.CharField(max_length=6, primary_key=True, serialize=False),
                ),
                ("kid", models.CharField(max_length=60, unique=True)),
            ],
            options={
                "db_table": "sim_kid",
            },
        ),
        migrations.CreateModel(
            name="LogTransferencia",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "registro",
                    models.CharField(
                        help_text="Puede ser payment_id o session_id", max_length=64
                    ),
                ),
                (
                    "tipo_log",
                    models.CharField(
                        choices=[
                            ("AUTH", "Autenticación"),
                            ("TRANSFER", "Transferencia"),
                            ("XML", "Generación XML"),
                            ("AML", "Generación AML"),
                            ("ERROR", "Error"),
                            ("SCA", "Autenticación Fuerte"),
                            ("OTP", "Generación OTP"),
                        ],
                        max_length=20,
                    ),
                ),
                ("contenido", models.TextField()),
                ("created_at", models.DateTimeField(auto_now_add=True, db_index=True)),
            ],
            options={
                "verbose_name": "Log de Transferencia",
                "verbose_name_plural": "Logs de Transferencias",
                "db_table": "sim_log_transferencia",
                "ordering": ["-created_at"],
            },
        ),
        migrations.CreateModel(
            name="OficialBancario",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("username", models.CharField(max_length=50, unique=True)),
                ("password_hash", models.CharField(max_length=128)),
            ],
        ),
        migrations.CreateModel(
            name="OTPChallenge",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("payment_id", models.CharField(max_length=100)),
                (
                    "challenge_id",
                    models.UUIDField(default=uuid.uuid4, editable=False, unique=True),
                ),
                ("otp", models.CharField(max_length=6)),
                ("status", models.CharField(default="CREATED", max_length=20)),
                ("created_at", models.DateTimeField(default=django.utils.timezone.now)),
            ],
        ),
        migrations.CreateModel(
            name="PaymentIdentification",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("end_to_end_id", models.CharField(max_length=35)),
                ("instruction_id", models.CharField(max_length=35)),
            ],
            options={
                "db_table": "sim_payment_identification",
            },
        ),
        migrations.CreateModel(
            name="PostalAddress",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "country",
                    models.CharField(
                        max_length=2,
                        validators=[
                            django.core.validators.RegexValidator(
                                message="Código de país ISO 3166-1 alpha-2, e.g. “DE”, “ES”",
                                regex="^[A-Z]{2}$",
                            )
                        ],
                    ),
                ),
                ("street", models.CharField(max_length=70)),
                ("city", models.CharField(max_length=70)),
            ],
            options={
                "db_table": "sim_postal_address",
            },
        ),
        migrations.CreateModel(
            name="TransferenciaSimulada",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("payment_id", models.CharField(max_length=100, unique=True)),
                ("monto", models.DecimalField(decimal_places=2, max_digits=10)),
                ("destino", models.CharField(blank=True, max_length=200)),
                (
                    "creditor",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="banco.creditorsimulado",
                    ),
                ),
                (
                    "debtor",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="banco.debtorsimulado",
                    ),
                ),
                (
                    "oficial",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="banco.oficialbancario",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Transfer",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "payment_id",
                    models.CharField(db_index=True, max_length=36, unique=True),
                ),
                (
                    "instructed_amount",
                    models.DecimalField(
                        decimal_places=2,
                        max_digits=18,
                        validators=[django.core.validators.MinValueValidator(0.01)],
                    ),
                ),
                (
                    "currency",
                    models.CharField(
                        default="EUR",
                        max_length=3,
                        validators=[
                            django.core.validators.RegexValidator(
                                message="Código de moneda ISO 4217, e.g. “EUR”, “USD”",
                                regex="^[A-Z]{3}$",
                            )
                        ],
                    ),
                ),
                ("purpose_code", models.CharField(default="GDSV", max_length=4)),
                ("requested_execution_date", models.DateField()),
                (
                    "remittance_information_unstructured",
                    models.CharField(blank=True, max_length=140, null=True),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("CREA", "Creada"),
                            ("PDNG", "Pendiente"),
                            ("ACSP", "En Proceso"),
                            ("ACSC", "Ejecutada"),
                            ("RJCT", "Rechazada"),
                            ("CANC", "Cancelada"),
                            ("ERRO", "Error"),
                        ],
                        db_index=True,
                        default="CREA",
                        max_length=10,
                    ),
                ),
                ("auth_id", models.CharField(blank=True, max_length=100, null=True)),
                ("created_at", models.DateTimeField(auto_now_add=True, db_index=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "client",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="transfers",
                        to="banco.clientid",
                    ),
                ),
                (
                    "creditor",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="transfers",
                        to="banco.creditor",
                    ),
                ),
                (
                    "creditor_account",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        to="banco.creditoraccount",
                    ),
                ),
                (
                    "creditor_agent",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        to="banco.creditoragent",
                    ),
                ),
                (
                    "debtor",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="transfers",
                        to="banco.debtor",
                    ),
                ),
                (
                    "debtor_account",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        to="banco.debtoraccount",
                    ),
                ),
                (
                    "kid",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="transfers",
                        to="banco.kid",
                    ),
                ),
                (
                    "payment_identification",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="banco.paymentidentification",
                    ),
                ),
            ],
            options={
                "db_table": "sim_transfer",
                "ordering": ["-created_at"],
            },
        ),
        migrations.AddField(
            model_name="debtor",
            name="address",
            field=models.OneToOneField(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="%(class)ss_address",
                to="banco.postaladdress",
            ),
        ),
        migrations.AddField(
            model_name="creditor",
            name="address",
            field=models.OneToOneField(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="%(class)ss_address",
                to="banco.postaladdress",
            ),
        ),
    ]